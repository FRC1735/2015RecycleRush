// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.RecycleRush2015;
    

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeft;
    public static SpeedController driveTrainRight;
    public static RobotDrive driveTrainRobotDrive21;
    public static Encoder driveTrainLeftMotorEncoder;
    public static Encoder driveTrainRightMotorEncoder;
    public static SpeedController lifterLifterMotor;
    public static Servo lifterRatchetServo;
    public static DigitalInput lifterToteReadyIndicator;
    public static AnalogPotentiometer lifterLiftHeightPot;
    public static DigitalInput lifterLimitHigh;
    public static DigitalInput lifterLimitLow;
    public static SpeedController collectorRollerIntakeMotorLeft;
    public static SpeedController collectorRollerIntakeMotorRight;
    public static Compressor pokerCompressor;
    public static DoubleSolenoid pokerDoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // HACK ALERT!
    // RobotBuilder doesn't support the Talon SRX in CAN mode.
    // So, create that object manually, and overwrite the variable for the PWM controller created by RobotBuilder.
    // This will leave the original PWM object orphaned, but hey... this is Java.  ;-)
    public static CANTalon lifterLifterMotorCAN;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeft = new Victor(0);
        LiveWindow.addActuator("Drive Train", "Left", (Victor) driveTrainLeft);
        
        driveTrainRight = new Victor(1);
        LiveWindow.addActuator("Drive Train", "Right", (Victor) driveTrainRight);
        
        driveTrainRobotDrive21 = new RobotDrive(driveTrainLeft, driveTrainRight);
        
        driveTrainRobotDrive21.setSafetyEnabled(true);
        driveTrainRobotDrive21.setExpiration(0.1);
        driveTrainRobotDrive21.setSensitivity(0.5);
        driveTrainRobotDrive21.setMaxOutput(1.0);
        

        driveTrainLeftMotorEncoder = new Encoder(5, 6, true, EncodingType.k1X);
        LiveWindow.addSensor("Drive Train", "Left Motor Encoder", driveTrainLeftMotorEncoder);
        driveTrainLeftMotorEncoder.setDistancePerPulse(0.00277777777);
        driveTrainLeftMotorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveTrainRightMotorEncoder = new Encoder(7, 8, false, EncodingType.k1X);
        LiveWindow.addSensor("Drive Train", "Right Motor Encoder", driveTrainRightMotorEncoder);
        driveTrainRightMotorEncoder.setDistancePerPulse(0.00277777777);
        driveTrainRightMotorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        lifterLifterMotor = new VictorSP(2);
        LiveWindow.addActuator("Lifter", "Lifter Motor", (VictorSP) lifterLifterMotor);
        
        lifterRatchetServo = new Servo(3);
        LiveWindow.addActuator("Lifter", "Ratchet Servo", lifterRatchetServo);
        
        lifterToteReadyIndicator = new DigitalInput(0);
        LiveWindow.addSensor("Lifter", "Tote Ready Indicator", lifterToteReadyIndicator);
        
        lifterLiftHeightPot = new AnalogPotentiometer(0, 10.0, 0.0);
        LiveWindow.addSensor("Lifter", "Lift Height Pot", lifterLiftHeightPot);
        
        lifterLimitHigh = new DigitalInput(3);
        LiveWindow.addSensor("Lifter", "Limit High", lifterLimitHigh);
        
        lifterLimitLow = new DigitalInput(4);
        LiveWindow.addSensor("Lifter", "Limit Low", lifterLimitLow);
        
        collectorRollerIntakeMotorLeft = new Talon(6);
        LiveWindow.addActuator("Collector Roller", "Intake Motor Left", (Talon) collectorRollerIntakeMotorLeft);
        
        collectorRollerIntakeMotorRight = new Talon(7);
        LiveWindow.addActuator("Collector Roller", "Intake Motor Right", (Talon) collectorRollerIntakeMotorRight);
        
        pokerCompressor = new Compressor(0);
        
        
        pokerDoubleSolenoid = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Poker", "Double Solenoid", pokerDoubleSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // HACK ALERT!
        // RobotBuilder doesn't support the Talon SRX in CAN mode.
        // So, create that object manually, and overwrite the variable for the PWM controller created by RobotBuilder.
        // This will leave the original PWM object orphaned, but hey... this is Java.  ;-)
        lifterLifterMotorCAN = new CANTalon(0);
    }
}
