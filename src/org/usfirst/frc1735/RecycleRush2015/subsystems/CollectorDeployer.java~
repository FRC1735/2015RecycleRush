// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.RecycleRush2015.subsystems;

import org.usfirst.frc1735.RecycleRush2015.RobotMap;
import org.usfirst.frc1735.RecycleRush2015.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class CollectorDeployer extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController deployMotor = RobotMap.collectorDeployerDeployMotor;
    AnalogPotentiometer deployPot = RobotMap.collectorDeployerDeployPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Local Member Variables
    // Potentiometer low and high limits for hard stop.  These probably should match the PID up and down setpoints.
    double m_deployPotUpLimit = 0;
    double m_deployPotDownLimit = 1;
    
    // Initialize your subsystem here
    public CollectorDeployer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("CollectorDeployer", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Collector Deployer", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return deployPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        deployMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    public void deployMove(double magnitudeDirection) {
    	//if we are currently at a limit, don't do anything...
    	if (((magnitudeDirection > 0) && reachedUpLimit()) ||
    		((magnitudeDirection < 0) && reachedDownLimit())) return;
    	deployMotor.set(magnitudeDirection);
    }
    
    public boolean reachedUpLimit() {
    	// If the pot reads below this value, we have gotten close enough to the hard stop that we should shut off the motor.
    	return (RobotMap.collectorDeployerDeployPot.get() >= m_deployPotUpLimit);
    }

    public boolean reachedDownLimit() {
    	// If the pot reads below this value, we have gotten close enough to the hard stop that we should shut off the motor.
    	return (RobotMap.collectorDeployerDeployPot.get() <= m_deployPotDownLimit);
    }
    
    public void stop() {
    	deployMotor.set(0);
    }

}
