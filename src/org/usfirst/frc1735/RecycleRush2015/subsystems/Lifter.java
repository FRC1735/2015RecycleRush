// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.RecycleRush2015.subsystems;

import org.usfirst.frc1735.RecycleRush2015.Robot;
import org.usfirst.frc1735.RecycleRush2015.RobotMap;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Lifter extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController lifterMotor = RobotMap.lifterLifterMotor;
    Servo ratchetServo = RobotMap.lifterRatchetServo;
    Servo fingerServoLeft = RobotMap.lifterFingerServoLeft;
    Servo fingerServoRight = RobotMap.lifterFingerServoRight;
    DigitalInput toteReadyIndicator = RobotMap.lifterToteReadyIndicator;
    Encoder liftHeightEncoder = RobotMap.lifterLiftHeightEncoder;
    AnalogPotentiometer liftHeightPot = RobotMap.lifterLiftHeightPot;
    DigitalInput fingerLimitSwitchLeft = RobotMap.lifterFingerLimitSwitchLeft;
    DigitalInput fingerLimitSwitchRight = RobotMap.lifterFingerLimitSwitchRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Lifter constants
    public static final double FINGER_ENGAGED = 30, // degrees
    		FINGER_DISENGAGED = 5; // Degrees
    
    // Initialize your subsystem here
    public Lifter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Lifter", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Lifter", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return liftHeightPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        lifterMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    // ---------------------------------
    // User-defined functions start here
    // ---------------------------------

    // move ratchet servo to desired position in degrees.
    public void ratchetMove(double angle) {
    	RobotMap.lifterRatchetServo.setAngle(angle);
    }
    
    // Wrapper function for handling ratchet plus lifter.   Called by Commands.
    public void lifterMove(double setpoint) {
	    // Because there is a ratchet interlock, we need to determine if the ratchet needs to be disengaged before invoking the PID controller!
	    // If the current encoder value is BELOW (ore equal to) the setpoint, engage the ratchet.
	    // If the current encoder value is ABOVE the setpoint, we have to lower the lift and should DISENGAGE the ratchet.
	    if (Robot.lifter.getPosition() <= setpoint) {
	    	Robot.lifter.ratchetMove(Robot.m_ratchetEngagePosition);
		}
		else {
			Robot.lifter.ratchetMove(Robot.m_ratchetDisengagePosition);
	    }
	    // Now we can move the lifter into position without damaging anything...
	    Robot.lifter.enable();
	    Robot.lifter.setSetpoint(setpoint);
    }
    
    public void fingerEngage() {
    	fingerMove(FINGER_ENGAGED);
    }
    
    public void fingerDisengage() {
    	fingerMove(FINGER_DISENGAGED);
    }
    
    // Disengage fingers on the lifter to allow a stack to be depositied
    public void fingerMove(double angle) {
    	RobotMap.lifterFingerServoLeft.setAngle(angle);
    	RobotMap.lifterFingerServoRight.setAngle(angle);
    	
    }
}
