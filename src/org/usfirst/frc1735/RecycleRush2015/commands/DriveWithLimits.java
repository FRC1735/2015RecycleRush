// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.RecycleRush2015.commands;

import org.usfirst.frc1735.RecycleRush2015.Robot;
import org.usfirst.frc1735.RecycleRush2015.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class  DriveWithLimits extends Command {
	public DriveWithLimits(double timeLimit, double distanceLimit) {
			this(timeLimit, distanceLimit, 1); //Default magnitude is 100% forward
	}
	public DriveWithLimits(double timeLimit, double distanceLimit, double MagnitudeDirection) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(timeLimit);
        m_distanceLimit = distanceLimit;
        m_magnitudeDirection = MagnitudeDirection;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Grab the current encoder distance as the starting point
    	m_leftStartDistance = RobotMap.driveTrainLeftMotorEncoder.getDistance();
    	m_rightStartDistance = RobotMap.driveTrainRightMotorEncoder.getDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Drive until we hit one of the limits.
    	double leftMagnitudeDirection = m_magnitudeDirection;
    	double rightMagnitudeDirection = leftMagnitudeDirection;  // Initially set left and right to be the same value.
    	
    	if (m_enableDriveCompensation) {
        	// Use the encoders here to ensure we are tracking straight!
        	// Possible algo is to assume we must travel an equal distance for both wheels, which when corrected continuously, will result in straight travel overall...
        		// read both distances
        		// reduce the faster motor by a percentage of the error difference
        		// if the distances are equal, set the motors equal again
        	// sort of like a cheap PID...?
            double currentLeftDistance = RobotMap.driveTrainLeftMotorEncoder.getDistance();
            double currentRightDistance = RobotMap.driveTrainRightMotorEncoder.getDistance();
            double leftTravel = Math.abs(currentLeftDistance - m_leftStartDistance);
            double rightTravel = Math.abs(currentRightDistance - m_rightStartDistance);
            double travelError = Math.abs(leftTravel - rightTravel);

            if ( travelError > 0.1) {
            	// If the error is greater than 0.1 (our assumed tolerance), then we need to compensate
            	if (leftTravel > rightTravel) {
            		// if left is farther, back it off by a percentage of the total error
            		leftMagnitudeDirection  = leftMagnitudeDirection  * (1-(0.5 * travelError));
            	}
            	else {
            		rightMagnitudeDirection = rightMagnitudeDirection * (1-(0.5 * travelError));
            	}
            } // end if (travelError)
    	} // end if (m_enableDriveCompensation)
    	//System.out.println("driving with L= " + leftMagnitudeDirection + ", R= " + rightMagnitudeDirection);
    	Robot.driveTrain.tankDrive(leftMagnitudeDirection,  rightMagnitudeDirection);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        boolean timedOut = isTimedOut();
        double currentLeftDistance = RobotMap.driveTrainLeftMotorEncoder.getDistance();
        double currentRightDistance = RobotMap.driveTrainRightMotorEncoder.getDistance();
        double leftTravel = Math.abs(currentLeftDistance - m_leftStartDistance);
        double rightTravel = Math.abs(currentRightDistance - m_rightStartDistance);
        //System.out.println("m_distanceLimit = " + m_distanceLimit);
        //System.out.println("R distance traveled is " + rightTravel + " and L distance traveled is " + leftTravel);
        boolean finished = (timedOut || (leftTravel > Math.abs(m_distanceLimit)) || (rightTravel > Math.abs(m_distanceLimit)));
        //System.out.println("isFinished returns status= " + finished);
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    // Member Variables
    double m_magnitudeDirection; 	// target speed/direction
    double m_distanceLimit;  		// target relative distance
    double m_leftStartDistance;		// starting absolute distance from encoder
    double m_rightStartDistance;	// starting absolute distance from encoder
    boolean m_enableDriveCompensation = false; //Master enable for autonomous drive compensation to ensure robot tracks straight

}
